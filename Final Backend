import os
import signal
from flask import Flask, Blueprint, request, jsonify, redirect
from flask_sqlalchemy import SQLAlchemy
from pymongo import MongoClient
import pika
import requests
from dotenv import load_dotenv
from flask_caching import Cache
import logging
from google_auth_oauthlib.flow import Flow

# Load environment variables from the .env file
load_dotenv()

# Configuration
class Config:
    SECRET_KEY = os.getenv("SECRET_KEY", "default_secret_key")
    SQLALCHEMY_DATABASE_URI = os.getenv("SQLALCHEMY_DATABASE_URI", "sqlite:///chatbot.db")
    SQLALCHEMY_TRACK_MODIFICATIONS = False
    GEMINI_API_KEY = os.getenv("GEMINI_API_KEY", "default_gemini_key")
    GEMINI_API_URL = os.getenv("GEMINI_API_URL", "https://gemini-api.example.com/v1/authenticate")
    MONGO_URI = os.getenv("MONGO_URI", "mongodb://localhost:27017/")
    MONGO_DB_NAME = os.getenv("MONGO_DB_NAME", "chatbot")
    RABBITMQ_HOST = os.getenv("RABBITMQ_HOST", "localhost")
    RABBITMQ_QUEUE = os.getenv("RABBITMQ_QUEUE", "chat_queue")
    CACHE_TYPE = "RedisCache"
    CACHE_REDIS_URL = os.getenv("REDIS_URL", "redis://localhost:6379/0")
    CLIENT_SECRET_FILE = os.getenv("CLIENT_SECRET_FILE", "client_secret.json")
    OAUTH_REDIRECT_URI = os.getenv("OAUTH_REDIRECT_URI", "http://localhost:5000/oauth/callback")
    OAUTH_SCOPES = ['https://www.googleapis.com/auth/userinfo.email']

# SQLAlchemy for SQL database
db = SQLAlchemy()

# Initialize caching
cache = Cache(config={"CACHE_TYPE": Config.CACHE_TYPE, "CACHE_REDIS_URL": Config.CACHE_REDIS_URL})

# MongoDB client for NoSQL
try:
    mongo_client = MongoClient(Config.MONGO_URI)
    mongo_db = mongo_client[Config.MONGO_DB_NAME]
except Exception as e:
    logging.error(f"MongoDB connection failed: {e}")
    mongo_client, mongo_db = None, None

# RabbitMQ Service with Retry
def connect_rabbitmq():
    attempts = 3
    while attempts > 0:
        try:
            connection = pika.BlockingConnection(pika.ConnectionParameters(Config.RABBITMQ_HOST))
            channel = connection.channel()
            channel.queue_declare(queue=Config.RABBITMQ_QUEUE)
            return channel
        except pika.exceptions.AMQPConnectionError as e:
            logging.warning(f"Failed to connect to RabbitMQ: {e}. Retrying...")
            attempts -= 1
    return None

def publish_message(message):
    channel = connect_rabbitmq()
    if channel:
        channel.basic_publish(exchange='', routing_key=Config.RABBITMQ_QUEUE, body=message)
        logging.info(f" [x] Sent '{message}'")
    else:
        logging.error("RabbitMQ connection failed after retries.")

# Gemini API Integration for Authentication
def authenticate_with_gemini(user_token):
    try:
        headers = {
            "Authorization": f"Bearer {Config.GEMINI_API_KEY}"
        }
        payload = {"user_token": user_token}
        response = requests.post(Config.GEMINI_API_URL, json=payload, headers=headers)
        response.raise_for_status()
        return response.json().get("authenticated", False)
    except requests.exceptions.RequestException as e:
        logging.error(f"Error authenticating with Gemini API: {e}")
        return False

# Google OAuth Integration
def get_oauth_flow():
    return Flow.from_client_secrets_file(
        Config.CLIENT_SECRET_FILE,
        scopes=Config.OAUTH_SCOPES,
        redirect_uri=Config.OAUTH_REDIRECT_URI
    )

# Routes Blueprint
bp = Blueprint('routes', __name__)

@bp.route('/api/v1/chat', methods=['POST'])
def chat():
    data = request.get_json()
    user_message = data.get("message")
    user_token = data.get("user_token")

    if not authenticate_with_gemini(user_token):
        return jsonify({"error": "Authentication failed"}), 401

    # Process user message (kept from your existing code)
    response = {"message": f"Processed message: {user_message}"}
    return jsonify(response)

@bp.route('/')
def home():
    flow = get_oauth_flow()
    auth_url, _ = flow.authorization_url(prompt='consent')
    return redirect(auth_url)

@bp.route('/oauth/callback')
def oauth_callback():
    flow = get_oauth_flow()
    authorization_response = request.url
    flow.fetch_token(authorization_response=authorization_response)
    credentials = flow.credentials
    user_info = {
        'access_token': credentials.token,
        'refresh_token': credentials.refresh_token,
        'expires_in': credentials.expiry,
        'client_id': credentials.client_id,
        'client_secret': credentials.client_secret
    }
    return jsonify(user_info)

# App Factory
def create_app():
    app = Flask(__name__)
    app.config.from_object(Config)
    db.init_app(app)
    cache.init_app(app)
    app.register_blueprint(bp)
    return app

# Signal Handling for Graceful Shutdown
def handle_shutdown(signal, frame):
    logging.info("Shutting down gracefully...")
    if mongo_client:
        mongo_client.close()
    exit(0)

signal.signal(signal.SIGINT, handle_shutdown)
signal.signal(signal.SIGTERM, handle_shutdown)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    app = create_app()
    app.run(debug=False, host="0.0.0.0", port=8001)
